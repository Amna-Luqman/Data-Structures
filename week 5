#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* prev;
    Node* next;
};


void insertEnd(Node*& head, int value) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->prev = nullptr;
    newNode->next = nullptr;

    if (head == nullptr) {
        head = newNode;
        return;
    }

    Node* temp = head;
    while (temp->next != nullptr) {
        temp = temp->next;
    }
    temp->next = newNode;
    newNode->prev = temp;
}

void display(Node* head) {
    Node* temp = head;
    while (temp != nullptr) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

void deleteFromBeginning(Node*& head) {
    if (head == nullptr) {
        cout << "List is empty\n";
        return;
    }

    Node* temp = head;
    head = head->next;   
    if (head != nullptr) {
        head->prev = nullptr;
    }
    delete temp;
}

void deleteFromEnd(Node*& head) {
    if (head == nullptr) {
        cout << "List is empty\n";
        return;
    }

    Node* temp = head;
    while (temp->next != nullptr) {
        temp = temp->next;
    }

    if (temp->prev != nullptr) {
        temp->prev->next = nullptr;
    } else {
        
        head = nullptr;
    }
    delete temp;
}


void deleteAtPosition(Node*& head, int pos) {
    if (head == nullptr) {
        cout << "List is empty\n";
        return;
    }

    Node* temp = head;
    for (int i = 1; temp != nullptr && i < pos; i++) {
        temp = temp->next;
    }

    if (temp == nullptr) {
        cout << "Invalid Position";
        return;
    }

    if (temp->prev == nullptr) {
        head = temp->next;
        if (head != nullptr) {
            head->prev = nullptr;
        }
    }
    else {
        temp->prev->next = temp->next;
        if (temp->next != nullptr) {
            temp->next->prev = temp->prev;
        }
    }
    delete temp;
}


int main() {
    Node* head = nullptr;

  
    insertEnd(head, 10);
    insertEnd(head, 20);
    insertEnd(head, 30);
    insertEnd(head, 40);
    insertEnd(head, 50);

    cout << "Original List: ";
    display(head);

    deleteFromBeginning(head);
    cout << "After deleting from beginning: ";
    display(head);

    deleteFromEnd(head);
    cout << "After deleting from end: ";
    display(head);

    deleteAtPosition(head, 2);
    cout << "After deleting at position 2: ";
    display(head);

    return 0;
}
